{"Dice":{"code":"","info":{"source":"// <ORACLIZE_API>\n/*\nCopyright (c) 2015-2016 Oraclize srl, Thomas Bertani\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) returns (bytes32 _id);\n    function getPrice(string _datasource) returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\n    function useCoupon(string _coupon);\n    function setProofType(byte _proofType);\n}\ncontract OraclizeAddrResolverI {\n    function getAddress() returns (address _addr);\n}\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR = OraclizeAddrResolverI(0x1d11e5eae3112dbd44f99266872ff1d07c77dce8);\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        oraclize = OraclizeI(OAR.getAddress());\n        _\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        oraclize.useCoupon(code);\n        _\n    }\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n        if (networkID == networkID_mainnet) OAR = OraclizeAddrResolverI(0x1d11e5eae3112dbd44f99266872ff1d07c77dce8);\n        else if (networkID == networkID_testnet) OAR = OraclizeAddrResolverI(0x0ae06d5934fd75d214951eb96633fbd7f9262a7c);\n        else if (networkID == networkID_consensys) OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\n        else return false;\n        return true;\n    }\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n\n\n\n    function parseAddr(string _a) internal returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n\n    function strCompare(string _a, string _b) internal returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n   }\n\n    function indexOf(string _haystack, string _needle) internal returns (int)\n    {\n    \tbytes memory h = bytes(_haystack);\n    \tbytes memory n = bytes(_needle);\n    \tif(h.length < 1 || n.length < 1 || (n.length > h.length))\n    \t\treturn -1;\n    \telse if(h.length > (2**128 -1))\n    \t\treturn -1;\n    \telse\n    \t{\n    \t\tuint subindex = 0;\n    \t\tfor (uint i = 0; i < h.length; i ++)\n    \t\t{\n    \t\t\tif (h[i] == n[0])\n    \t\t\t{\n    \t\t\t\tsubindex = 1;\n    \t\t\t\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n    \t\t\t\t{\n    \t\t\t\t\tsubindex++;\n    \t\t\t\t}\n    \t\t\t\tif(subindex == n.length)\n    \t\t\t\t\treturn int(i);\n    \t\t\t}\n    \t\t}\n    \t\treturn -1;\n    \t}\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        return mint;\n    }\n\n\n\n}\n// </ORACLIZE_API>\n\ncontract Dice is usingOraclize {\n\n  address admin = 0x0000000000000000000000000000000000000000;\n  uint public pwin = 5000; //probability of winning (10000 = 100%)\n  uint public edge = 200; //edge percentage (10000 = 100%)\n  uint public maxWin = 100; //max win (before edge is taken) as percentage of bankroll (10000 = 100%)\n  uint public minBet = 1 ether;\n  uint public maxInvestors = 5; //maximum number of investors\n\n  struct Investor {\n    address user;\n    uint capital;\n  }\n  mapping(uint => Investor) investors; //starts at 1\n  uint public numInvestors = 0;\n  mapping(address => uint) investorIDs;\n  uint public invested = 0;\n\n  struct Bet {\n    address user;\n    uint bet;\n  }\n  mapping (bytes32 => Bet) bets;\n  uint public numBets = 0;\n  uint public amountWagered = 0;\n  int public profit = 0;\n  int public takenProfit = 0;\n\n  bytes32 public idTest;\n  function Dice(address adminInitial, uint pwinInitial, uint edgeInitial, uint maxWinInitial, uint minBetInitial, uint maxInvestorsInitial) {\n    oraclize_setNetwork(networkID_testnet);\n    bytes32 id = oraclize_query(\"URL\", \"https://www.random.org/integers/?num=1&min=0&max=9999&col=1&base=10&format=plain&rnd=new\");\n    bets[id] = Bet(0x0000000000000000000000000000000000000000, 0);\n    idTest = id;\n    admin = adminInitial;\n    pwin = pwinInitial;\n    edge = edgeInitial;\n    maxWin = maxWinInitial;\n    minBet = minBetInitial;\n    maxInvestors = maxInvestorsInitial;\n  }\n\n  function() {\n    bet();\n  }\n\n  function bet() {\n    if (msg.value * 10000 / pwin - msg.value <= maxWin * getBankroll() / 10000 && msg.value>=minBet) {\n      if (oraclize.getPrice(\"URL\") < 1 ether) {\n        profit -= int(oraclize.getPrice(\"URL\")); //the house pays the oraclize fee\n        bytes32 id = oraclize_query(\"URL\", \"https://www.random.org/integers/?num=1&min=0&max=9999&col=1&base=10&format=plain&rnd=new\");\n        bets[id] = Bet(msg.sender, msg.value);\n      } else {\n        throw; //the fee is too large\n      }\n    } else {\n      throw;\n    }\n  }\n\n  function __callback(bytes32 id, string result) {\n    if (msg.sender != oraclize_cbAddress()) throw;\n    if (bets[id].bet>0) {\n      uint roll = parseInt(result);\n      if (roll <= pwin) { //win\n        bets[id].user.send(bets[id].bet * (10000 - edge) / pwin);\n        profit += int(bets[id].bet) - int(bets[id].bet * (10000 - edge) / pwin);\n      } else { //lose\n        bets[id].user.send(1); //send 1 wei\n        profit += int(bets[id].bet) - 1;\n      }\n      numBets++;\n      amountWagered += bets[id].bet;\n      bets[id].bet = 0;\n    }\n  }\n\n  function invest() {\n    if (investorIDs[msg.sender]>0) {\n      rebalance();\n      investors[investorIDs[msg.sender]].capital += msg.value;\n      invested += msg.value;\n    } else {\n      rebalance();\n      uint investorID = 0;\n      if (numInvestors<maxInvestors) {\n        investorID = ++numInvestors;\n      } else {\n        for (uint i=1; i<=numInvestors; i++) {\n          if (investors[i].capital<msg.value && investors[i].user!=admin && (investorID==0 || investors[i].capital<investors[investorID].capital)) {\n            investorID = i;\n          }\n        }\n      }\n      if (investorID>0) {\n        if (investors[investorID].capital>0) {\n          divest(investors[investorID].user, investors[investorID].capital);\n        }\n        investorIDs[investors[investorID].user] = 0;\n        investors[investorID].user = msg.sender;\n        investors[investorID].capital = msg.value;\n        invested += msg.value;\n        investorIDs[msg.sender] = investorID;\n      }\n    }\n  }\n\n  function rebalance() private {\n    uint newInvested = 0;\n    uint initialBankroll = getBankroll();\n    for (uint i=1; i<=numInvestors; i++) {\n      investors[i].capital = getBalance(investors[i].user);\n      newInvested += investors[i].capital;\n    }\n    invested = newInvested;\n    if (newInvested != initialBankroll && numInvestors>0) {\n      investors[1].capital += (initialBankroll - newInvested); //give the rounding error to the first investor\n      invested += (initialBankroll - newInvested);\n    }\n    takenProfit = profit;\n  }\n\n  function divest(address user, uint amount) private {\n    if (investorIDs[user]>0) {\n      rebalance();\n      if (amount>getBalance(user)) {\n        amount = getBalance(user);\n      }\n      investors[investorIDs[user]].capital -= amount;\n      invested -= amount;\n      if (user.send(amount)) {} else throw;\n    }\n  }\n\n  function divest(uint amount) {\n    if (msg.value>0) throw;\n    divest(msg.sender, amount);\n  }\n\n  function getBalance(address user) constant returns(uint) {\n    if (investorIDs[user]>0 && invested>0) {\n      return investors[investorIDs[user]].capital * getBankroll() / invested;\n    } else {\n      return 0;\n    }\n  }\n\n  function getBankroll() constant returns(uint) {\n    return uint(int(invested)+profit-takenProfit);\n  }\n\n  function getStatus() constant returns(uint, uint, uint, uint, uint, uint, int) {\n    return (getBankroll(), pwin, edge, maxWin, minBet, amountWagered, profit);\n  }\n\n  function changeAdmin(address newAdmin) {\n    if (msg.value>0) throw;\n    if (msg.sender == admin) {\n      admin = newAdmin;\n    }\n  }\n\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc679584106","abiDefinition":[{"constant":true,"inputs":[],"name":"getBankroll","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"bet","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"numInvestors","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"maxWin","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"bytes32"},{"name":"result","type":"string"}],"name":"__callback","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"takenProfit","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"getStatus","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"int256"}],"type":"function"},{"constant":true,"inputs":[],"name":"idTest","outputs":[{"name":"","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[],"name":"profit","outputs":[{"name":"","type":"int256"}],"type":"function"},{"constant":false,"inputs":[{"name":"amount","type":"uint256"}],"name":"divest","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"newAdmin","type":"address"}],"name":"changeAdmin","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"minBet","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"pwin","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"edge","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"maxInvestors","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"invested","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"amountWagered","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":true,"inputs":[],"name":"numBets","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[],"name":"invest","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"inputs":[{"name":"adminInitial","type":"address"},{"name":"pwinInitial","type":"uint256"},{"name":"edgeInitial","type":"uint256"},{"name":"maxWinInitial","type":"uint256"},{"name":"minBetInitial","type":"uint256"},{"name":"maxInvestorsInitial","type":"uint256"}],"type":"constructor"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}},"OraclizeAddrResolverI":{"code":"0x","info":{"source":"// <ORACLIZE_API>\n/*\nCopyright (c) 2015-2016 Oraclize srl, Thomas Bertani\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) returns (bytes32 _id);\n    function getPrice(string _datasource) returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\n    function useCoupon(string _coupon);\n    function setProofType(byte _proofType);\n}\ncontract OraclizeAddrResolverI {\n    function getAddress() returns (address _addr);\n}\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR = OraclizeAddrResolverI(0x1d11e5eae3112dbd44f99266872ff1d07c77dce8);\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        oraclize = OraclizeI(OAR.getAddress());\n        _\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        oraclize.useCoupon(code);\n        _\n    }\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n        if (networkID == networkID_mainnet) OAR = OraclizeAddrResolverI(0x1d11e5eae3112dbd44f99266872ff1d07c77dce8);\n        else if (networkID == networkID_testnet) OAR = OraclizeAddrResolverI(0x0ae06d5934fd75d214951eb96633fbd7f9262a7c);\n        else if (networkID == networkID_consensys) OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\n        else return false;\n        return true;\n    }\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n\n\n\n    function parseAddr(string _a) internal returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n\n    function strCompare(string _a, string _b) internal returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n   }\n\n    function indexOf(string _haystack, string _needle) internal returns (int)\n    {\n    \tbytes memory h = bytes(_haystack);\n    \tbytes memory n = bytes(_needle);\n    \tif(h.length < 1 || n.length < 1 || (n.length > h.length))\n    \t\treturn -1;\n    \telse if(h.length > (2**128 -1))\n    \t\treturn -1;\n    \telse\n    \t{\n    \t\tuint subindex = 0;\n    \t\tfor (uint i = 0; i < h.length; i ++)\n    \t\t{\n    \t\t\tif (h[i] == n[0])\n    \t\t\t{\n    \t\t\t\tsubindex = 1;\n    \t\t\t\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n    \t\t\t\t{\n    \t\t\t\t\tsubindex++;\n    \t\t\t\t}\n    \t\t\t\tif(subindex == n.length)\n    \t\t\t\t\treturn int(i);\n    \t\t\t}\n    \t\t}\n    \t\treturn -1;\n    \t}\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        return mint;\n    }\n\n\n\n}\n// </ORACLIZE_API>\n\ncontract Dice is usingOraclize {\n\n  address admin = 0x0000000000000000000000000000000000000000;\n  uint public pwin = 5000; //probability of winning (10000 = 100%)\n  uint public edge = 200; //edge percentage (10000 = 100%)\n  uint public maxWin = 100; //max win (before edge is taken) as percentage of bankroll (10000 = 100%)\n  uint public minBet = 1 ether;\n  uint public maxInvestors = 5; //maximum number of investors\n\n  struct Investor {\n    address user;\n    uint capital;\n  }\n  mapping(uint => Investor) investors; //starts at 1\n  uint public numInvestors = 0;\n  mapping(address => uint) investorIDs;\n  uint public invested = 0;\n\n  struct Bet {\n    address user;\n    uint bet;\n  }\n  mapping (bytes32 => Bet) bets;\n  uint public numBets = 0;\n  uint public amountWagered = 0;\n  int public profit = 0;\n  int public takenProfit = 0;\n\n  bytes32 public idTest;\n  function Dice(address adminInitial, uint pwinInitial, uint edgeInitial, uint maxWinInitial, uint minBetInitial, uint maxInvestorsInitial) {\n    oraclize_setNetwork(networkID_testnet);\n    bytes32 id = oraclize_query(\"URL\", \"https://www.random.org/integers/?num=1&min=0&max=9999&col=1&base=10&format=plain&rnd=new\");\n    bets[id] = Bet(0x0000000000000000000000000000000000000000, 0);\n    idTest = id;\n    admin = adminInitial;\n    pwin = pwinInitial;\n    edge = edgeInitial;\n    maxWin = maxWinInitial;\n    minBet = minBetInitial;\n    maxInvestors = maxInvestorsInitial;\n  }\n\n  function() {\n    bet();\n  }\n\n  function bet() {\n    if (msg.value * 10000 / pwin - msg.value <= maxWin * getBankroll() / 10000 && msg.value>=minBet) {\n      if (oraclize.getPrice(\"URL\") < 1 ether) {\n        profit -= int(oraclize.getPrice(\"URL\")); //the house pays the oraclize fee\n        bytes32 id = oraclize_query(\"URL\", \"https://www.random.org/integers/?num=1&min=0&max=9999&col=1&base=10&format=plain&rnd=new\");\n        bets[id] = Bet(msg.sender, msg.value);\n      } else {\n        throw; //the fee is too large\n      }\n    } else {\n      throw;\n    }\n  }\n\n  function __callback(bytes32 id, string result) {\n    if (msg.sender != oraclize_cbAddress()) throw;\n    if (bets[id].bet>0) {\n      uint roll = parseInt(result);\n      if (roll <= pwin) { //win\n        bets[id].user.send(bets[id].bet * (10000 - edge) / pwin);\n        profit += int(bets[id].bet) - int(bets[id].bet * (10000 - edge) / pwin);\n      } else { //lose\n        bets[id].user.send(1); //send 1 wei\n        profit += int(bets[id].bet) - 1;\n      }\n      numBets++;\n      amountWagered += bets[id].bet;\n      bets[id].bet = 0;\n    }\n  }\n\n  function invest() {\n    if (investorIDs[msg.sender]>0) {\n      rebalance();\n      investors[investorIDs[msg.sender]].capital += msg.value;\n      invested += msg.value;\n    } else {\n      rebalance();\n      uint investorID = 0;\n      if (numInvestors<maxInvestors) {\n        investorID = ++numInvestors;\n      } else {\n        for (uint i=1; i<=numInvestors; i++) {\n          if (investors[i].capital<msg.value && investors[i].user!=admin && (investorID==0 || investors[i].capital<investors[investorID].capital)) {\n            investorID = i;\n          }\n        }\n      }\n      if (investorID>0) {\n        if (investors[investorID].capital>0) {\n          divest(investors[investorID].user, investors[investorID].capital);\n        }\n        investorIDs[investors[investorID].user] = 0;\n        investors[investorID].user = msg.sender;\n        investors[investorID].capital = msg.value;\n        invested += msg.value;\n        investorIDs[msg.sender] = investorID;\n      }\n    }\n  }\n\n  function rebalance() private {\n    uint newInvested = 0;\n    uint initialBankroll = getBankroll();\n    for (uint i=1; i<=numInvestors; i++) {\n      investors[i].capital = getBalance(investors[i].user);\n      newInvested += investors[i].capital;\n    }\n    invested = newInvested;\n    if (newInvested != initialBankroll && numInvestors>0) {\n      investors[1].capital += (initialBankroll - newInvested); //give the rounding error to the first investor\n      invested += (initialBankroll - newInvested);\n    }\n    takenProfit = profit;\n  }\n\n  function divest(address user, uint amount) private {\n    if (investorIDs[user]>0) {\n      rebalance();\n      if (amount>getBalance(user)) {\n        amount = getBalance(user);\n      }\n      investors[investorIDs[user]].capital -= amount;\n      invested -= amount;\n      if (user.send(amount)) {} else throw;\n    }\n  }\n\n  function divest(uint amount) {\n    if (msg.value>0) throw;\n    divest(msg.sender, amount);\n  }\n\n  function getBalance(address user) constant returns(uint) {\n    if (investorIDs[user]>0 && invested>0) {\n      return investors[investorIDs[user]].capital * getBankroll() / invested;\n    } else {\n      return 0;\n    }\n  }\n\n  function getBankroll() constant returns(uint) {\n    return uint(int(invested)+profit-takenProfit);\n  }\n\n  function getStatus() constant returns(uint, uint, uint, uint, uint, uint, int) {\n    return (getBankroll(), pwin, edge, maxWin, minBet, amountWagered, profit);\n  }\n\n  function changeAdmin(address newAdmin) {\n    if (msg.value>0) throw;\n    if (msg.sender == admin) {\n      admin = newAdmin;\n    }\n  }\n\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc679584106","abiDefinition":[{"constant":false,"inputs":[],"name":"getAddress","outputs":[{"name":"_addr","type":"address"}],"type":"function"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}},"OraclizeI":{"code":"0x","info":{"source":"// <ORACLIZE_API>\n/*\nCopyright (c) 2015-2016 Oraclize srl, Thomas Bertani\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) returns (bytes32 _id);\n    function getPrice(string _datasource) returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\n    function useCoupon(string _coupon);\n    function setProofType(byte _proofType);\n}\ncontract OraclizeAddrResolverI {\n    function getAddress() returns (address _addr);\n}\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR = OraclizeAddrResolverI(0x1d11e5eae3112dbd44f99266872ff1d07c77dce8);\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        oraclize = OraclizeI(OAR.getAddress());\n        _\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        oraclize.useCoupon(code);\n        _\n    }\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n        if (networkID == networkID_mainnet) OAR = OraclizeAddrResolverI(0x1d11e5eae3112dbd44f99266872ff1d07c77dce8);\n        else if (networkID == networkID_testnet) OAR = OraclizeAddrResolverI(0x0ae06d5934fd75d214951eb96633fbd7f9262a7c);\n        else if (networkID == networkID_consensys) OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\n        else return false;\n        return true;\n    }\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n\n\n\n    function parseAddr(string _a) internal returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n\n    function strCompare(string _a, string _b) internal returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n   }\n\n    function indexOf(string _haystack, string _needle) internal returns (int)\n    {\n    \tbytes memory h = bytes(_haystack);\n    \tbytes memory n = bytes(_needle);\n    \tif(h.length < 1 || n.length < 1 || (n.length > h.length))\n    \t\treturn -1;\n    \telse if(h.length > (2**128 -1))\n    \t\treturn -1;\n    \telse\n    \t{\n    \t\tuint subindex = 0;\n    \t\tfor (uint i = 0; i < h.length; i ++)\n    \t\t{\n    \t\t\tif (h[i] == n[0])\n    \t\t\t{\n    \t\t\t\tsubindex = 1;\n    \t\t\t\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n    \t\t\t\t{\n    \t\t\t\t\tsubindex++;\n    \t\t\t\t}\n    \t\t\t\tif(subindex == n.length)\n    \t\t\t\t\treturn int(i);\n    \t\t\t}\n    \t\t}\n    \t\treturn -1;\n    \t}\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        return mint;\n    }\n\n\n\n}\n// </ORACLIZE_API>\n\ncontract Dice is usingOraclize {\n\n  address admin = 0x0000000000000000000000000000000000000000;\n  uint public pwin = 5000; //probability of winning (10000 = 100%)\n  uint public edge = 200; //edge percentage (10000 = 100%)\n  uint public maxWin = 100; //max win (before edge is taken) as percentage of bankroll (10000 = 100%)\n  uint public minBet = 1 ether;\n  uint public maxInvestors = 5; //maximum number of investors\n\n  struct Investor {\n    address user;\n    uint capital;\n  }\n  mapping(uint => Investor) investors; //starts at 1\n  uint public numInvestors = 0;\n  mapping(address => uint) investorIDs;\n  uint public invested = 0;\n\n  struct Bet {\n    address user;\n    uint bet;\n  }\n  mapping (bytes32 => Bet) bets;\n  uint public numBets = 0;\n  uint public amountWagered = 0;\n  int public profit = 0;\n  int public takenProfit = 0;\n\n  bytes32 public idTest;\n  function Dice(address adminInitial, uint pwinInitial, uint edgeInitial, uint maxWinInitial, uint minBetInitial, uint maxInvestorsInitial) {\n    oraclize_setNetwork(networkID_testnet);\n    bytes32 id = oraclize_query(\"URL\", \"https://www.random.org/integers/?num=1&min=0&max=9999&col=1&base=10&format=plain&rnd=new\");\n    bets[id] = Bet(0x0000000000000000000000000000000000000000, 0);\n    idTest = id;\n    admin = adminInitial;\n    pwin = pwinInitial;\n    edge = edgeInitial;\n    maxWin = maxWinInitial;\n    minBet = minBetInitial;\n    maxInvestors = maxInvestorsInitial;\n  }\n\n  function() {\n    bet();\n  }\n\n  function bet() {\n    if (msg.value * 10000 / pwin - msg.value <= maxWin * getBankroll() / 10000 && msg.value>=minBet) {\n      if (oraclize.getPrice(\"URL\") < 1 ether) {\n        profit -= int(oraclize.getPrice(\"URL\")); //the house pays the oraclize fee\n        bytes32 id = oraclize_query(\"URL\", \"https://www.random.org/integers/?num=1&min=0&max=9999&col=1&base=10&format=plain&rnd=new\");\n        bets[id] = Bet(msg.sender, msg.value);\n      } else {\n        throw; //the fee is too large\n      }\n    } else {\n      throw;\n    }\n  }\n\n  function __callback(bytes32 id, string result) {\n    if (msg.sender != oraclize_cbAddress()) throw;\n    if (bets[id].bet>0) {\n      uint roll = parseInt(result);\n      if (roll <= pwin) { //win\n        bets[id].user.send(bets[id].bet * (10000 - edge) / pwin);\n        profit += int(bets[id].bet) - int(bets[id].bet * (10000 - edge) / pwin);\n      } else { //lose\n        bets[id].user.send(1); //send 1 wei\n        profit += int(bets[id].bet) - 1;\n      }\n      numBets++;\n      amountWagered += bets[id].bet;\n      bets[id].bet = 0;\n    }\n  }\n\n  function invest() {\n    if (investorIDs[msg.sender]>0) {\n      rebalance();\n      investors[investorIDs[msg.sender]].capital += msg.value;\n      invested += msg.value;\n    } else {\n      rebalance();\n      uint investorID = 0;\n      if (numInvestors<maxInvestors) {\n        investorID = ++numInvestors;\n      } else {\n        for (uint i=1; i<=numInvestors; i++) {\n          if (investors[i].capital<msg.value && investors[i].user!=admin && (investorID==0 || investors[i].capital<investors[investorID].capital)) {\n            investorID = i;\n          }\n        }\n      }\n      if (investorID>0) {\n        if (investors[investorID].capital>0) {\n          divest(investors[investorID].user, investors[investorID].capital);\n        }\n        investorIDs[investors[investorID].user] = 0;\n        investors[investorID].user = msg.sender;\n        investors[investorID].capital = msg.value;\n        invested += msg.value;\n        investorIDs[msg.sender] = investorID;\n      }\n    }\n  }\n\n  function rebalance() private {\n    uint newInvested = 0;\n    uint initialBankroll = getBankroll();\n    for (uint i=1; i<=numInvestors; i++) {\n      investors[i].capital = getBalance(investors[i].user);\n      newInvested += investors[i].capital;\n    }\n    invested = newInvested;\n    if (newInvested != initialBankroll && numInvestors>0) {\n      investors[1].capital += (initialBankroll - newInvested); //give the rounding error to the first investor\n      invested += (initialBankroll - newInvested);\n    }\n    takenProfit = profit;\n  }\n\n  function divest(address user, uint amount) private {\n    if (investorIDs[user]>0) {\n      rebalance();\n      if (amount>getBalance(user)) {\n        amount = getBalance(user);\n      }\n      investors[investorIDs[user]].capital -= amount;\n      invested -= amount;\n      if (user.send(amount)) {} else throw;\n    }\n  }\n\n  function divest(uint amount) {\n    if (msg.value>0) throw;\n    divest(msg.sender, amount);\n  }\n\n  function getBalance(address user) constant returns(uint) {\n    if (investorIDs[user]>0 && invested>0) {\n      return investors[investorIDs[user]].capital * getBankroll() / invested;\n    } else {\n      return 0;\n    }\n  }\n\n  function getBankroll() constant returns(uint) {\n    return uint(int(invested)+profit-takenProfit);\n  }\n\n  function getStatus() constant returns(uint, uint, uint, uint, uint, uint, int) {\n    return (getBankroll(), pwin, edge, maxWin, minBet, amountWagered, profit);\n  }\n\n  function changeAdmin(address newAdmin) {\n    if (msg.value>0) throw;\n    if (msg.sender == admin) {\n      admin = newAdmin;\n    }\n  }\n\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc679584106","abiDefinition":[{"constant":false,"inputs":[{"name":"_datasource","type":"string"},{"name":"gaslimit","type":"uint256"}],"name":"getPrice","outputs":[{"name":"_dsprice","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"_datasource","type":"string"}],"name":"getPrice","outputs":[{"name":"_dsprice","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"_coupon","type":"string"}],"name":"useCoupon","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_proofType","type":"bytes1"}],"name":"setProofType","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"},{"name":"_datasource","type":"string"},{"name":"_arg1","type":"string"},{"name":"_arg2","type":"string"}],"name":"query2","outputs":[{"name":"_id","type":"bytes32"}],"type":"function"},{"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"},{"name":"_datasource","type":"string"},{"name":"_arg1","type":"string"},{"name":"_arg2","type":"string"},{"name":"_gaslimit","type":"uint256"}],"name":"query2_withGasLimit","outputs":[{"name":"_id","type":"bytes32"}],"type":"function"},{"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"},{"name":"_datasource","type":"string"},{"name":"_arg","type":"string"}],"name":"query","outputs":[{"name":"_id","type":"bytes32"}],"type":"function"},{"constant":true,"inputs":[],"name":"cbAddress","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"_timestamp","type":"uint256"},{"name":"_datasource","type":"string"},{"name":"_arg","type":"string"},{"name":"_gaslimit","type":"uint256"}],"name":"query_withGasLimit","outputs":[{"name":"_id","type":"bytes32"}],"type":"function"}],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}},"usingOraclize":{"code":"0x606060405260008054600160a060020a031916731d11e5eae3112dbd44f99266872ff1d07c77dce81781556006908190603790396000f3606060405200","info":{"source":"// <ORACLIZE_API>\n/*\nCopyright (c) 2015-2016 Oraclize srl, Thomas Bertani\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) returns (bytes32 _id);\n    function getPrice(string _datasource) returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\n    function useCoupon(string _coupon);\n    function setProofType(byte _proofType);\n}\ncontract OraclizeAddrResolverI {\n    function getAddress() returns (address _addr);\n}\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR = OraclizeAddrResolverI(0x1d11e5eae3112dbd44f99266872ff1d07c77dce8);\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        oraclize = OraclizeI(OAR.getAddress());\n        _\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        oraclize.useCoupon(code);\n        _\n    }\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n        if (networkID == networkID_mainnet) OAR = OraclizeAddrResolverI(0x1d11e5eae3112dbd44f99266872ff1d07c77dce8);\n        else if (networkID == networkID_testnet) OAR = OraclizeAddrResolverI(0x0ae06d5934fd75d214951eb96633fbd7f9262a7c);\n        else if (networkID == networkID_consensys) OAR = OraclizeAddrResolverI(0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf);\n        else return false;\n        return true;\n    }\n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n\n\n\n    function parseAddr(string _a) internal returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n\n    function strCompare(string _a, string _b) internal returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n   }\n\n    function indexOf(string _haystack, string _needle) internal returns (int)\n    {\n    \tbytes memory h = bytes(_haystack);\n    \tbytes memory n = bytes(_needle);\n    \tif(h.length < 1 || n.length < 1 || (n.length > h.length))\n    \t\treturn -1;\n    \telse if(h.length > (2**128 -1))\n    \t\treturn -1;\n    \telse\n    \t{\n    \t\tuint subindex = 0;\n    \t\tfor (uint i = 0; i < h.length; i ++)\n    \t\t{\n    \t\t\tif (h[i] == n[0])\n    \t\t\t{\n    \t\t\t\tsubindex = 1;\n    \t\t\t\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n    \t\t\t\t{\n    \t\t\t\t\tsubindex++;\n    \t\t\t\t}\n    \t\t\t\tif(subindex == n.length)\n    \t\t\t\t\treturn int(i);\n    \t\t\t}\n    \t\t}\n    \t\treturn -1;\n    \t}\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        return mint;\n    }\n\n\n\n}\n// </ORACLIZE_API>\n\ncontract Dice is usingOraclize {\n\n  address admin = 0x0000000000000000000000000000000000000000;\n  uint public pwin = 5000; //probability of winning (10000 = 100%)\n  uint public edge = 200; //edge percentage (10000 = 100%)\n  uint public maxWin = 100; //max win (before edge is taken) as percentage of bankroll (10000 = 100%)\n  uint public minBet = 1 ether;\n  uint public maxInvestors = 5; //maximum number of investors\n\n  struct Investor {\n    address user;\n    uint capital;\n  }\n  mapping(uint => Investor) investors; //starts at 1\n  uint public numInvestors = 0;\n  mapping(address => uint) investorIDs;\n  uint public invested = 0;\n\n  struct Bet {\n    address user;\n    uint bet;\n  }\n  mapping (bytes32 => Bet) bets;\n  uint public numBets = 0;\n  uint public amountWagered = 0;\n  int public profit = 0;\n  int public takenProfit = 0;\n\n  bytes32 public idTest;\n  function Dice(address adminInitial, uint pwinInitial, uint edgeInitial, uint maxWinInitial, uint minBetInitial, uint maxInvestorsInitial) {\n    oraclize_setNetwork(networkID_testnet);\n    bytes32 id = oraclize_query(\"URL\", \"https://www.random.org/integers/?num=1&min=0&max=9999&col=1&base=10&format=plain&rnd=new\");\n    bets[id] = Bet(0x0000000000000000000000000000000000000000, 0);\n    idTest = id;\n    admin = adminInitial;\n    pwin = pwinInitial;\n    edge = edgeInitial;\n    maxWin = maxWinInitial;\n    minBet = minBetInitial;\n    maxInvestors = maxInvestorsInitial;\n  }\n\n  function() {\n    bet();\n  }\n\n  function bet() {\n    if (msg.value * 10000 / pwin - msg.value <= maxWin * getBankroll() / 10000 && msg.value>=minBet) {\n      if (oraclize.getPrice(\"URL\") < 1 ether) {\n        profit -= int(oraclize.getPrice(\"URL\")); //the house pays the oraclize fee\n        bytes32 id = oraclize_query(\"URL\", \"https://www.random.org/integers/?num=1&min=0&max=9999&col=1&base=10&format=plain&rnd=new\");\n        bets[id] = Bet(msg.sender, msg.value);\n      } else {\n        throw; //the fee is too large\n      }\n    } else {\n      throw;\n    }\n  }\n\n  function __callback(bytes32 id, string result) {\n    if (msg.sender != oraclize_cbAddress()) throw;\n    if (bets[id].bet>0) {\n      uint roll = parseInt(result);\n      if (roll <= pwin) { //win\n        bets[id].user.send(bets[id].bet * (10000 - edge) / pwin);\n        profit += int(bets[id].bet) - int(bets[id].bet * (10000 - edge) / pwin);\n      } else { //lose\n        bets[id].user.send(1); //send 1 wei\n        profit += int(bets[id].bet) - 1;\n      }\n      numBets++;\n      amountWagered += bets[id].bet;\n      bets[id].bet = 0;\n    }\n  }\n\n  function invest() {\n    if (investorIDs[msg.sender]>0) {\n      rebalance();\n      investors[investorIDs[msg.sender]].capital += msg.value;\n      invested += msg.value;\n    } else {\n      rebalance();\n      uint investorID = 0;\n      if (numInvestors<maxInvestors) {\n        investorID = ++numInvestors;\n      } else {\n        for (uint i=1; i<=numInvestors; i++) {\n          if (investors[i].capital<msg.value && investors[i].user!=admin && (investorID==0 || investors[i].capital<investors[investorID].capital)) {\n            investorID = i;\n          }\n        }\n      }\n      if (investorID>0) {\n        if (investors[investorID].capital>0) {\n          divest(investors[investorID].user, investors[investorID].capital);\n        }\n        investorIDs[investors[investorID].user] = 0;\n        investors[investorID].user = msg.sender;\n        investors[investorID].capital = msg.value;\n        invested += msg.value;\n        investorIDs[msg.sender] = investorID;\n      }\n    }\n  }\n\n  function rebalance() private {\n    uint newInvested = 0;\n    uint initialBankroll = getBankroll();\n    for (uint i=1; i<=numInvestors; i++) {\n      investors[i].capital = getBalance(investors[i].user);\n      newInvested += investors[i].capital;\n    }\n    invested = newInvested;\n    if (newInvested != initialBankroll && numInvestors>0) {\n      investors[1].capital += (initialBankroll - newInvested); //give the rounding error to the first investor\n      invested += (initialBankroll - newInvested);\n    }\n    takenProfit = profit;\n  }\n\n  function divest(address user, uint amount) private {\n    if (investorIDs[user]>0) {\n      rebalance();\n      if (amount>getBalance(user)) {\n        amount = getBalance(user);\n      }\n      investors[investorIDs[user]].capital -= amount;\n      invested -= amount;\n      if (user.send(amount)) {} else throw;\n    }\n  }\n\n  function divest(uint amount) {\n    if (msg.value>0) throw;\n    divest(msg.sender, amount);\n  }\n\n  function getBalance(address user) constant returns(uint) {\n    if (investorIDs[user]>0 && invested>0) {\n      return investors[investorIDs[user]].capital * getBankroll() / invested;\n    } else {\n      return 0;\n    }\n  }\n\n  function getBankroll() constant returns(uint) {\n    return uint(int(invested)+profit-takenProfit);\n  }\n\n  function getStatus() constant returns(uint, uint, uint, uint, uint, uint, int) {\n    return (getBankroll(), pwin, edge, maxWin, minBet, amountWagered, profit);\n  }\n\n  function changeAdmin(address newAdmin) {\n    if (msg.value>0) throw;\n    if (msg.sender == admin) {\n      admin = newAdmin;\n    }\n  }\n\n}\n","language":"Solidity","languageVersion":"0.2.0","compilerVersion":"0.2.0","compilerOptions":"--bin --abi --userdoc --devdoc --add-std --optimize -o /var/folders/sj/bz257rsj0w1g7cpjjycd7wpw0000gn/T/solc679584106","abiDefinition":[],"userDoc":{"methods":{}},"developerDoc":{"methods":{}}}}}